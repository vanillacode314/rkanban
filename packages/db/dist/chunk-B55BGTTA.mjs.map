{"version":3,"sources":["../src/utils/ms/_.ts"],"sourcesContent":["// Helpers.\nconst s = 1000;\nconst m = s * 60;\nconst h = m * 60;\nconst d = h * 24;\nconst w = d * 7;\nconst y = d * 365.25;\n\ntype Unit =\n\t| 'D'\n\t| 'Day'\n\t| 'Days'\n\t| 'H'\n\t| 'Hour'\n\t| 'Hours'\n\t| 'Hr'\n\t| 'Hrs'\n\t| 'M'\n\t| 'Millisecond'\n\t| 'Milliseconds'\n\t| 'Min'\n\t| 'Mins'\n\t| 'Minute'\n\t| 'Minutes'\n\t| 'Ms'\n\t| 'Msec'\n\t| 'Msecs'\n\t| 's'\n\t| 'Sec'\n\t| 'Second'\n\t| 'Seconds'\n\t| 'Secs'\n\t| 'W'\n\t| 'Week'\n\t| 'Weeks'\n\t| 'Y'\n\t| 'Year'\n\t| 'Years'\n\t| 'Yr'\n\t| 'Yrs';\n\ntype UnitAnyCase = Lowercase<Unit> | Unit | Uppercase<Unit>;\n\nexport type StringValue = `${number} ${UnitAnyCase}` | `${number}${UnitAnyCase}` | `${number}`;\n\ninterface Options {\n\t/**\n\t * Set to `true` to use verbose formatting. Defaults to `false`.\n\t */\n\tlong?: boolean;\n}\n\n/**\n * Parse or format the given value.\n *\n * @param value - The string or number to convert\n * @param options - Options for the conversion\n * @throws Error if `value` is not a non-empty string or a number\n */\nfunction msFn(value: StringValue, options?: Options): number;\nfunction msFn(value: number, options?: Options): string;\nfunction msFn(value: number | StringValue, options?: Options): number | string {\n\ttry {\n\t\tif (typeof value === 'string') {\n\t\t\treturn parse(value);\n\t\t} else if (typeof value === 'number') {\n\t\t\treturn format(value, options);\n\t\t}\n\t\tthrow new Error('Value provided to ms() must be a string or number.');\n\t} catch (error) {\n\t\tconst message =\n\t\t\tisError(error) ?\n\t\t\t\t`${error.message}. value=${JSON.stringify(value)}`\n\t\t\t:\t'An unknown error has occurred.';\n\t\tthrow new Error(message);\n\t}\n}\n\n/**\n * Parse the given string and return milliseconds.\n *\n * @param str - A string to parse to milliseconds\n * @returns The parsed value in milliseconds, or `NaN` if the string can't be\n * parsed\n */\nexport function parse(str: string): number {\n\tif (typeof str !== 'string' || str.length === 0 || str.length > 100) {\n\t\tthrow new Error('Value provided to ms.parse() must be a string with length between 1 and 99.');\n\t}\n\tconst match =\n\t\t/^(?<value>-?(?:\\d+)?\\.?\\d+) *(?<type>milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n\t\t\tstr\n\t\t);\n\t// Named capture groups need to be manually typed today.\n\t// https://github.com/microsoft/TypeScript/issues/32098\n\tconst groups = match?.groups as { type?: string; value: string } | undefined;\n\tif (!groups) {\n\t\treturn NaN;\n\t}\n\tconst n = parseFloat(groups.value);\n\tconst type = (groups.type || 'ms').toLowerCase() as Lowercase<Unit>;\n\tswitch (type) {\n\t\tcase 'd':\n\t\tcase 'day':\n\t\tcase 'days':\n\t\t\treturn n * d;\n\t\tcase 'h':\n\t\tcase 'hour':\n\t\tcase 'hours':\n\t\tcase 'hr':\n\t\tcase 'hrs':\n\t\t\treturn n * h;\n\t\tcase 'm':\n\t\tcase 'min':\n\t\tcase 'mins':\n\t\tcase 'minute':\n\t\tcase 'minutes':\n\t\t\treturn n * m;\n\t\tcase 'millisecond':\n\t\tcase 'milliseconds':\n\t\tcase 'ms':\n\t\tcase 'msec':\n\t\tcase 'msecs':\n\t\t\treturn n;\n\t\tcase 's':\n\t\tcase 'sec':\n\t\tcase 'second':\n\t\tcase 'seconds':\n\t\tcase 'secs':\n\t\t\treturn n * s;\n\t\tcase 'w':\n\t\tcase 'week':\n\t\tcase 'weeks':\n\t\t\treturn n * w;\n\t\tcase 'y':\n\t\tcase 'year':\n\t\tcase 'years':\n\t\tcase 'yr':\n\t\tcase 'yrs':\n\t\t\treturn n * y;\n\t\tdefault:\n\t\t\t// This should never occur.\n\t\t\tthrow new Error(`The unit ${type as string} was matched, but no matching case exists.`);\n\t}\n}\n\n/**\n * Parse the given StringValue and return milliseconds.\n *\n * @param value - A typesafe StringValue to parse to milliseconds\n * @returns The parsed value in milliseconds, or `NaN` if the string can't be\n * parsed\n */\nexport function parseStrict(value: StringValue): number {\n\treturn parse(value);\n}\n\nexport default msFn;\n\n/**\n * Short format for `ms`.\n */\nfunction fmtShort(ms: number): StringValue {\n\tconst msAbs = Math.abs(ms);\n\tif (msAbs >= d) {\n\t\treturn `${Math.round(ms / d)}d`;\n\t}\n\tif (msAbs >= h) {\n\t\treturn `${Math.round(ms / h)}h`;\n\t}\n\tif (msAbs >= m) {\n\t\treturn `${Math.round(ms / m)}m`;\n\t}\n\tif (msAbs >= s) {\n\t\treturn `${Math.round(ms / s)}s`;\n\t}\n\treturn `${ms}ms`;\n}\n\n/**\n * Long format for `ms`.\n */\nfunction fmtLong(ms: number): StringValue {\n\tconst msAbs = Math.abs(ms);\n\tif (msAbs >= d) {\n\t\treturn plural(ms, msAbs, d, 'day');\n\t}\n\tif (msAbs >= h) {\n\t\treturn plural(ms, msAbs, h, 'hour');\n\t}\n\tif (msAbs >= m) {\n\t\treturn plural(ms, msAbs, m, 'minute');\n\t}\n\tif (msAbs >= s) {\n\t\treturn plural(ms, msAbs, s, 'second');\n\t}\n\treturn `${ms} ms`;\n}\n\n/**\n * Format the given integer as a string.\n *\n * @param ms - milliseconds\n * @param options - Options for the conversion\n * @returns The formatted string\n */\nexport function format(ms: number, options?: Options): string {\n\tif (typeof ms !== 'number' || !isFinite(ms)) {\n\t\tthrow new Error('Value provided to ms.format() must be of type number.');\n\t}\n\treturn options?.long ? fmtLong(ms) : fmtShort(ms);\n}\n\n/**\n * Pluralization helper.\n */\nfunction plural(ms: number, msAbs: number, n: number, name: string): StringValue {\n\tconst isPlural = msAbs >= n * 1.5;\n\treturn `${Math.round(ms / n)} ${name}${isPlural ? 's' : ''}` as StringValue;\n}\n\n/**\n * A type guard for errors.\n *\n * @param value - The value to test\n * @returns A boolean `true` if the provided value is an Error-like object\n */\nfunction isError(value: unknown): value is Error {\n\treturn typeof value === 'object' && value !== null && 'message' in value;\n}\n"],"mappings":"AA6DA,SAASA,EAAKC,EAA6BC,EAAoC,CAC9E,GAAI,CACH,GAAI,OAAOD,GAAU,SACpB,OAAOE,EAAMF,CAAK,EACZ,GAAI,OAAOA,GAAU,SAC3B,OAAOG,EAAOH,EAAOC,CAAO,EAE7B,MAAM,IAAI,MAAM,oDAAoD,CACrE,OAASG,EAAO,CACf,IAAMC,EACLC,EAAQF,CAAK,EACZ,GAAGA,EAAM,OAAO,WAAW,KAAK,UAAUJ,CAAK,CAAC,GAC/C,iCACH,MAAM,IAAI,MAAMK,CAAO,CACxB,CACD,CASO,SAASH,EAAMK,EAAqB,CAC1C,GAAI,OAAOA,GAAQ,UAAYA,EAAI,SAAW,GAAKA,EAAI,OAAS,IAC/D,MAAM,IAAI,MAAM,6EAA6E,EAQ9F,IAAMC,EALL,kJAAkJ,KACjJD,CACD,GAGqB,OACtB,GAAI,CAACC,EACJ,MAAO,KAER,IAAMC,EAAI,WAAWD,EAAO,KAAK,EAC3BE,GAAQF,EAAO,MAAQ,MAAM,YAAY,EAC/C,OAAQE,EAAM,CACb,IAAK,IACL,IAAK,MACL,IAAK,OACJ,OAAOD,EAAI,MACZ,IAAK,IACL,IAAK,OACL,IAAK,QACL,IAAK,KACL,IAAK,MACJ,OAAOA,EAAI,KACZ,IAAK,IACL,IAAK,MACL,IAAK,OACL,IAAK,SACL,IAAK,UACJ,OAAOA,EAAI,IACZ,IAAK,cACL,IAAK,eACL,IAAK,KACL,IAAK,OACL,IAAK,QACJ,OAAOA,EACR,IAAK,IACL,IAAK,MACL,IAAK,SACL,IAAK,UACL,IAAK,OACJ,OAAOA,EAAI,IACZ,IAAK,IACL,IAAK,OACL,IAAK,QACJ,OAAOA,EAAI,OACZ,IAAK,IACL,IAAK,OACL,IAAK,QACL,IAAK,KACL,IAAK,MACJ,OAAOA,EAAI,SACZ,QAEC,MAAM,IAAI,MAAM,YAAYC,CAAc,4CAA4C,CACxF,CACD,CASO,SAASC,EAAYX,EAA4B,CACvD,OAAOE,EAAMF,CAAK,CACnB,CAEA,IAAOY,EAAQb,EAKf,SAASc,EAASC,EAAyB,CAC1C,IAAMC,EAAQ,KAAK,IAAID,CAAE,EACzB,OAAIC,GAAS,MACL,GAAG,KAAK,MAAMD,EAAK,KAAC,CAAC,IAEzBC,GAAS,KACL,GAAG,KAAK,MAAMD,EAAK,IAAC,CAAC,IAEzBC,GAAS,IACL,GAAG,KAAK,MAAMD,EAAK,GAAC,CAAC,IAEzBC,GAAS,IACL,GAAG,KAAK,MAAMD,EAAK,GAAC,CAAC,IAEtB,GAAGA,CAAE,IACb,CAKA,SAASE,EAAQF,EAAyB,CACzC,IAAMC,EAAQ,KAAK,IAAID,CAAE,EACzB,OAAIC,GAAS,MACLE,EAAOH,EAAIC,EAAO,MAAG,KAAK,EAE9BA,GAAS,KACLE,EAAOH,EAAIC,EAAO,KAAG,MAAM,EAE/BA,GAAS,IACLE,EAAOH,EAAIC,EAAO,IAAG,QAAQ,EAEjCA,GAAS,IACLE,EAAOH,EAAIC,EAAO,IAAG,QAAQ,EAE9B,GAAGD,CAAE,KACb,CASO,SAASX,EAAOW,EAAYb,EAA2B,CAC7D,GAAI,OAAOa,GAAO,UAAY,CAAC,SAASA,CAAE,EACzC,MAAM,IAAI,MAAM,uDAAuD,EAExE,OAAOb,GAAS,KAAOe,EAAQF,CAAE,EAAID,EAASC,CAAE,CACjD,CAKA,SAASG,EAAOH,EAAYC,EAAeN,EAAWS,EAA2B,CAChF,IAAMC,EAAWJ,GAASN,EAAI,IAC9B,MAAO,GAAG,KAAK,MAAMK,EAAKL,CAAC,CAAC,IAAIS,CAAI,GAAGC,EAAW,IAAM,EAAE,EAC3D,CAQA,SAASb,EAAQN,EAAgC,CAChD,OAAO,OAAOA,GAAU,UAAYA,IAAU,MAAQ,YAAaA,CACpE","names":["msFn","value","options","parse","format","error","message","isError","str","groups","n","type","parseStrict","__default","fmtShort","ms","msAbs","fmtLong","plural","name","isPlural"]}