{"version":3,"sources":["../src/schema.ts"],"sourcesContent":["import { InferSelectModel, sql } from \"drizzle-orm\";\nimport {\n  AnySQLiteColumn,\n  integer,\n  sqliteTable,\n  text,\n  unique,\n} from \"drizzle-orm/sqlite-core\";\nimport { createSelectSchema } from \"drizzle-zod\";\nimport { nanoid } from \"nanoid\";\n\nimport { ms } from \"~/utils/ms\";\n\nconst refreshTokens = sqliteTable(\"refreshTokens\", {\n  expiresAt: integer(\"expiresAt\", { mode: \"timestamp\" }).notNull(),\n  id: text(\"id\")\n    .primaryKey()\n    .$defaultFn(() => nanoid()),\n  token: text(\"token\").notNull(),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n});\n\nconst verificationTokens = sqliteTable(\"verificationTokens\", {\n  expiresAt: integer(\"expiresAt\", { mode: \"timestamp\" })\n    .notNull()\n    .$defaultFn(() => new Date(Date.now() + ms(\"10 min\"))),\n  id: text(\"id\")\n    .primaryKey()\n    .$defaultFn(() => nanoid()),\n  token: text(\"token\").notNull(),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n});\n\nconst forgotPasswordTokens = sqliteTable(\"forgotPasswordTokens\", {\n  expiresAt: integer(\"expiresAt\", { mode: \"timestamp\" })\n    .notNull()\n    .$defaultFn(() => new Date(Date.now() + ms(\"10 min\"))),\n  id: text(\"id\")\n    .primaryKey()\n    .$defaultFn(() => nanoid()),\n  token: text(\"token\").notNull(),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n});\n\nconst users = sqliteTable(\"users\", {\n  createdAt: integer(\"createdAt\", { mode: \"timestamp\" })\n    .notNull()\n    .default(sql`(unixepoch('now'))`),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: integer(\"emailVerified\", { mode: \"boolean\" }).default(false),\n  encryptedPrivateKey: text(\"encryptedPrivateKey\"),\n  id: text(\"id\")\n    .primaryKey()\n    .$defaultFn(() => nanoid()),\n  passwordHash: text(\"passwordHash\").notNull(),\n  publicKey: text(\"publicKey\"),\n  salt: text(\"salt\"),\n  updatedAt: integer(\"updatedAt\", { mode: \"timestamp\" })\n    .notNull()\n    .default(sql`(unixepoch('now'))`)\n    .$onUpdateFn(() => new Date()),\n});\n\nconst boards = sqliteTable(\n  \"boards\",\n  {\n    createdAt: integer(\"createdAt\", { mode: \"timestamp\" })\n      .notNull()\n      .default(sql`(unixepoch('now'))`),\n    id: text(\"id\")\n      .primaryKey()\n      .$defaultFn(() => nanoid()),\n    index: integer(\"index\").notNull(),\n    nodeId: text(\"nodeId\")\n      .references(() => nodes.id, { onDelete: \"cascade\" })\n      .notNull(),\n    title: text(\"title\").notNull(),\n    updatedAt: integer(\"updatedAt\", { mode: \"timestamp\" })\n      .notNull()\n      .default(sql`(unixepoch('now'))`)\n      .$onUpdateFn(() => new Date()),\n    userId: text(\"userId\")\n      .references(() => users.id, { onDelete: \"cascade\" })\n      .notNull(),\n  },\n  (table) => {\n    return {\n      unq: unique().on(table.index, table.userId, table.nodeId),\n    };\n  },\n);\n\nconst tasks = sqliteTable(\n  \"tasks\",\n  {\n    boardId: text(\"boardId\")\n      .references(() => boards.id, { onDelete: \"cascade\" })\n      .notNull(),\n    createdAt: integer(\"createdAt\", { mode: \"timestamp\" })\n      .notNull()\n      .default(sql`(unixepoch('now'))`),\n    id: text(\"id\")\n      .primaryKey()\n      .$defaultFn(() => nanoid()),\n    index: integer(\"index\").notNull(),\n    title: text(\"title\").notNull(),\n    updatedAt: integer(\"updatedAt\", { mode: \"timestamp\" })\n      .notNull()\n      .default(sql`(unixepoch('now'))`)\n      .$onUpdateFn(() => new Date()),\n    userId: text(\"userId\")\n      .references(() => users.id, { onDelete: \"cascade\" })\n      .notNull(),\n  },\n  (table) => {\n    return {\n      unq: unique().on(table.index, table.boardId),\n    };\n  },\n);\n\nconst nodes = sqliteTable(\n  \"nodes\",\n  {\n    createdAt: integer(\"createdAt\", { mode: \"timestamp\" })\n      .notNull()\n      .default(sql`(unixepoch('now'))`),\n    id: text(\"id\")\n      .primaryKey()\n      .$defaultFn(() => nanoid()),\n    isDirectory: integer(\"isDirectory\", { mode: \"boolean\" }).notNull(),\n    name: text(\"name\").notNull(),\n    parentId: text(\"parentId\").references((): AnySQLiteColumn => nodes.id, {\n      onDelete: \"cascade\",\n    }),\n    updatedAt: integer(\"updatedAt\", { mode: \"timestamp\" })\n      .notNull()\n      .default(sql`(unixepoch('now'))`)\n      .$onUpdate(() => new Date()),\n    userId: text(\"userId\")\n      .notNull()\n      .references(() => users.id, { onDelete: \"cascade\" }),\n  },\n  (t) => ({\n    unq: unique().on(t.name, t.parentId, t.userId),\n  }),\n);\n\nconst nodesSchema = createSelectSchema(nodes);\nconst boardsSchema = createSelectSchema(boards);\nconst tasksSchema = createSelectSchema(tasks);\n\ntype TBoard = InferSelectModel<typeof boards>;\ntype TTask = InferSelectModel<typeof tasks>;\ntype TUser = InferSelectModel<typeof users>;\ntype TNode = InferSelectModel<typeof nodes>;\n\nexport {\n  boards,\n  boardsSchema,\n  forgotPasswordTokens,\n  nodes,\n  nodesSchema,\n  refreshTokens,\n  tasks,\n  tasksSchema,\n  users,\n  verificationTokens,\n};\nexport type { TBoard, TNode, TTask, TUser };\n"],"mappings":"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","names":["sql","integer","sqliteTable","text","unique","createSelectSchema","nanoid","refreshTokens","sqliteTable","integer","text","nanoid","users","verificationTokens","__default","forgotPasswordTokens","sql","boards","nodes","table","unique","tasks","t","nodesSchema","createSelectSchema","boardsSchema","tasksSchema"]}